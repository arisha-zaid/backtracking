//N-Queens 
public static void print(char board[][]){
    System.out.println("-----------chess board-----------");
    for(int i=0;i<board.length;i++){
      for(int j=0;j<board.length;j++)
      System.out.print(board[i][j]);
      System.out.println();
    }
   }

   public static boolean isSafe(char board[][],int row,int col){
    //up attack check
    for(int i=row-1;i>=0;i--){
      if(board[i][col]=='Q')
      return false;
    }
    //left up diagonal attack check
    for(int i=row-1, j=col-1;i>=0 && j>=0 ;i--,j--){
      if(board[i][j]=='Q')
      return false;
    }
    //right up diagonal attack check
    for(int i=row-1, j=col+1;i>=0 && j<board.length ;i--,j++){
      if(board[i][j]=='Q')
      return false;
    }
    return true;
   }

   public static void nQueens(char board[][],int row,int n){

    if(row==n){
      print(board);
      return;
    }

    //kaam
    for(int j=0;j<n;j++){
    if(isSafe(board,row,j)){
       //make queen sat
       board[row][j]='Q';
       //next row call;
       nQueens(board, row+1, n);
     //ask her to get up
     board[row][j]='X';
    }
    }
   }


public static void main(String args[]){
    int n=4;
    char board[][]=new char[n][n];
    //initialize with vacant 
     for(int i=0;i<n;i++){
      for(int j=0;j<n;j++)
      board[i][j]='X';
     }

    nQueens(board, 0,n);
  }
}

